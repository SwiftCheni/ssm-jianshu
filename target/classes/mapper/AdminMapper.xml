<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.swift.dao.IAdminDao">
    <resultMap id="BaseResultMap" type="com.swift.bean.Admin">
        <id column="aid" jdbcType="INTEGER" property="aid"/>
        <result column="aname" jdbcType="VARCHAR" property="aname"/>
        <result column="apassword" jdbcType="VARCHAR" property="apassword"/>
        <result column="atime" jdbcType="TIMESTAMP" property="atime"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        aid, aname, apassword, atime
    </sql>

    <!-- 管理员登录，按姓名和密码查询 -->
    <!--select id="selectByAdmin" parameterType="com.swift.bean.Admin" resultMap="BaseResultMap"-->
    <select id="selectByAdmin" parameterType="com.swift.bean.Admin" resultType="com.swift.bean.Admin">
        select
        <!--include refid="Base_Column_List" /-->
        *
        from admin
        where aname = #{aname,jdbcType=VARCHAR} and apassword = #{apassword,jdbcType=VARCHAR}
    </select>

    <!-- 管理员注册，按姓名查询 -->
    <select id="selectByAdminName" parameterType="com.swift.bean.Admin" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from admin
        where aname = #{aname,jdbcType=VARCHAR}
    </select>

    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from admin
        where aid = #{aid,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from admin
        where aid = #{aid,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="com.swift.bean.Admin">
        insert into admin (aid, aname, apassword,
        atime)
        values (#{aid,jdbcType=INTEGER}, #{aname,jdbcType=VARCHAR}, #{apassword,jdbcType=VARCHAR},
        #{atime,jdbcType=TIMESTAMP})
    </insert>
    <insert id="insertSelective" parameterType="com.swift.bean.Admin">
        insert into admin
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="aid != null">
                aid,
            </if>
            <if test="aname != null">
                aname,
            </if>
            <if test="apassword != null">
                apassword,
            </if>
            <if test="atime != null">
                atime,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="aid != null">
                #{aid,jdbcType=INTEGER},
            </if>
            <if test="aname != null">
                #{aname,jdbcType=VARCHAR},
            </if>
            <if test="apassword != null">
                #{apassword,jdbcType=VARCHAR},
            </if>
            <if test="atime != null">
                #{atime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByExampleSelective" parameterType="map">
        update admin
        <set>
            <if test="record.aid != null">
                aid = #{record.aid,jdbcType=INTEGER},
            </if>
            <if test="record.aname != null">
                aname = #{record.aname,jdbcType=VARCHAR},
            </if>
            <if test="record.apassword != null">
                apassword = #{record.apassword,jdbcType=VARCHAR},
            </if>
            <if test="record.atime != null">
                atime = #{record.atime,jdbcType=TIMESTAMP},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update admin
        set aid = #{record.aid,jdbcType=INTEGER},
        aname = #{record.aname,jdbcType=VARCHAR},
        apassword = #{record.apassword,jdbcType=VARCHAR},
        atime = #{record.atime,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.swift.bean.Admin">
        update admin
        <set>
            <if test="aname != null">
                aname = #{aname,jdbcType=VARCHAR},
            </if>
            <if test="apassword != null">
                apassword = #{apassword,jdbcType=VARCHAR},
            </if>
            <if test="atime != null">
                atime = #{atime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where aid = #{aid,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.swift.bean.Admin">
        update admin
        set aname = #{aname,jdbcType=VARCHAR},
        apassword = #{apassword,jdbcType=VARCHAR},
        atime = #{atime,jdbcType=TIMESTAMP}
        where aid = #{aid,jdbcType=INTEGER}
    </update>

    <!--获得文章-->
    <select id="getArticles"  resultType="com.swift.bean.Article">
    select
    fid, titles, fcontent, photo, bname, time, userid, username, status
    from article
	order by fid desc
    limit #{0},#{1}
  </select>

    <!-- 总帖数 -->
    <select id="totalArticle" resultType="java.lang.Integer">
    select count(1) from article
  </select>

    <!-- 查询板块的所有信息 -->
    <select id="getPlate" resultType="com.swift.bean.Plate">
        select
        *
        from plate
        order by bid desc
    </select>
    <!-- 查询板块数目-->
    <select id="totalPlate" resultType="java.lang.Integer">
        select
        count(*)
        from plate
    </select>

    <!--获取所有用户-->
    <select id="getUser" resultType="com.swift.bean.User">
        select u.userid as userid, u.name as name, u.age as age,
         u.sex as sex, u.email as email, u.password as password, u.family as family,
         u.intro as intro, u.time as time, v.photo as photo from USER u JOIN via v ON u.userid=v.`userid`
         limit #{0},#{1}
    </select>

    <!--获取用户数目-->
    <select id="totalUser" resultType="java.lang.Integer">
        select count(*) from user
    </select>

    <!-- 修改article表的status属性（修改审核状态） -->
    <update id="updateArticleStatus" parameterType="com.swift.bean.Article">
    update article
    set status = #{status,jdbcType=INTEGER}
    where fid = #{fid,jdbcType=INTEGER}
  </update>

    <!--删除用户，仅从数据库中删除用户记录-->
    <delete id="delUser" parameterType="java.lang.Integer">
    delete from user
    where userid = #{userid,jdbcType=INTEGER}
    </delete>

    <!-- 删除该用户对应的所有评论信息(按userid) -->
    <delete id="delCommentByUid" parameterType="java.lang.Integer">
    delete from comment
    where userid = #{userid,jdbcType=INTEGER}
  </delete>

    <!-- 删除用户对应的帖子信息(按userid) -->
    <delete id="deleteArticleUserid" parameterType="java.lang.Integer">
    delete from article
    where userid = #{userid,jdbcType=INTEGER}
  </delete>

    <!-- 删除该用户对应的关注和被关注信息 -->
    <delete id="deleteAttentionUseridOrBeuserid" parameterType="java.lang.Integer">
    delete from attention
    where userid = #{userid,jdbcType=INTEGER} or beuserid = #{userid,jdbcType=INTEGER}
  </delete>

    <!-- 删除该用户对应的收藏信息(按userid) -->
    <delete id="deleteCollectUserid" parameterType="java.lang.Integer">
    delete from collect
    where userid = #{userid,jdbcType=INTEGER}
  </delete>

</mapper>